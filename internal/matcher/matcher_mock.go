// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/quay/claircore/internal/matcher (interfaces: Matcher)

// Package matcher is a generated GoMock package.
package matcher

import (
	gomock "github.com/golang/mock/gomock"
	claircore "github.com/quay/claircore"
	vulnstore "github.com/quay/claircore/internal/vulnstore"
	reflect "reflect"
)

// MockMatcher is a mock of Matcher interface
type MockMatcher struct {
	ctrl     *gomock.Controller
	recorder *MockMatcherMockRecorder
}

// MockMatcherMockRecorder is the mock recorder for MockMatcher
type MockMatcherMockRecorder struct {
	mock *MockMatcher
}

// NewMockMatcher creates a new mock instance
func NewMockMatcher(ctrl *gomock.Controller) *MockMatcher {
	mock := &MockMatcher{ctrl: ctrl}
	mock.recorder = &MockMatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMatcher) EXPECT() *MockMatcherMockRecorder {
	return m.recorder
}

// Decide mocks base method
func (m *MockMatcher) Decide(arg0 *claircore.Package, arg1 *claircore.Vulnerability) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decide", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Decide indicates an expected call of Decide
func (mr *MockMatcherMockRecorder) Decide(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decide", reflect.TypeOf((*MockMatcher)(nil).Decide), arg0, arg1)
}

// How mocks base method
func (m *MockMatcher) How() []vulnstore.MatchExp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "How")
	ret0, _ := ret[0].([]vulnstore.MatchExp)
	return ret0
}

// How indicates an expected call of How
func (mr *MockMatcherMockRecorder) How() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "How", reflect.TypeOf((*MockMatcher)(nil).How))
}

// Interested mocks base method
func (m *MockMatcher) Interested(arg0 *claircore.Package) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Interested", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Interested indicates an expected call of Interested
func (mr *MockMatcherMockRecorder) Interested(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Interested", reflect.TypeOf((*MockMatcher)(nil).Interested), arg0)
}
